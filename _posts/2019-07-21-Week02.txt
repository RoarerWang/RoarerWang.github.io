---
layout:     post                    # 使用的布局（不需要改）
title:      Week02               # 标题 
subtitle:   面向对象进阶 Arraylist 正则表达式         #副标题
date:       2019-07-21              # 时间
author:     王瀚霆                      # 作者
header-img: img/bg3.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - Javase
---
#一 面向对象进阶
类与类之间关系  

    横向关系
1.依赖关系  
2.关联关系  1-1 1-N N-N
3.组合关系   包含     eg: has a
4.聚合关系   强包含  

   纵向关系  

1.继承关系   继承父类   eg:  is a
2.实现关系    实现接口

##1.继承
继承表现：  

1.子类继承父类
2.重写  

继承优点：
1、继承的出现提高了代码的复用性，提高软件开发效率。
2、继承的出现让类与类之间产生了关系，提供了多态的前提

子类可以继承父类中的方法和属性（都不能私有的情况下），
子类不能继承构造器（构造器作为创建对象来用）。
创建子类对象时，子类默认调用父类构造器，再调用子类构造器，
super(参数) ：来调用指定父类成分
this(参数)    ： 来调用指定本类成分
super this 都不能定义在static修饰的代码中

重写：对父类方法进行改写，遵循三同一不严格（发生在两个类中）
方法名,返回值类型，参数列表必须相同
子类访问控制修饰符不能比父类严格

##2.多态
多态表现：
1.重载 重写(覆盖)
2. F f = new S()  

多态优点：
1.提高代码复用性
2.对所有的类进行通用处理

三个基本要求：继承 重写  父类引用指向子类对象

重载：同名方法的不同表现形式（发生在一个类中）
方法名相同，参数列表 个数 或 类型 或 顺序 不同
与返回值和访问控制修饰符无关 

向上转型
F f = new S();    f 可以调用父类方法和子类重写后的方法

向下转型 向下转型必须先有向上转型

```
if(f insanceof S){    //判断是否有继承关系，可不可以转型
    S s = (S) f;         // s  可以调用子类方法了
}
```
 
##3.封装
封装表现：
1、方法就是一个最基本封装体。
2、类其实也是一个封装体  

封装优点：
 1、提高了代码的复用性。
 2、隐藏了实现细节，还要对外提供可以访问的方式。便于调用者的使用。这是核心之一，					
               3、提高了安全性
     访问控制修饰符     类内部 	       同一个包		子类（任何子类）	任何地方
private		√
defualt		√			√
protected		√			√		    √
public		√			√		    √					√
使用规则：属性私有，方法公共，个例除外：饿汉懒汉

#二 ArrayList
意义：存储任意类型元素，并且长度可变（数组拷贝实现）
创建:
导包：import java.util.ArrayList;
引用数据类型：创建对像
ArrayList<要存储元素的数据类型> 变量名 = new ArrayList<要存储元素的数据类型>()


基本数据类型的包装类（可以存储类 object 类）
基本数据类型 对应的引用数据类型表示形式
byte Byte
short Short
int Integer
long Long
float Float
double Double
char Character
boolean Boolean

常用方法：
方法声明 功能描述
boolean add(E obj) 将指定元素obj追加到集合的末尾
void add( int index, E obj) 将指定的元素obj插入到index的位置
E get(int index) 返回集合中指定位置上的元素
int size() 返回集合中的元素个数
Object remove（int index）  从集合中删除指定index处的元素，返回该元素
void clear（） 清空元素
Object set（int index, Object obj） 用指定元素obj替代集合中指定位置上的元素

自动装箱拆箱(在范围内)；其他包装类也是如此
Integer iii = Integer.valueof(4);
int nub = iii.intvalue;

享元模式
定义一个缓存的Integer[]数组，存储了 -128~127Integer对象，还有26个英文字母，
若在这个范围则不会新建，直接在数组中取，超过则 new Integer(值)

装箱：
int>>>Integer       valueof 方法
若在这个范围则不会新建，直接在数组中取，超过则 new Integer(值)  

拆箱：
Integer>>>int       intvalue  方法
Integer遇到int都会自动拆箱比较值  

基本数据类型与包装类区别：
包装类 需要实例化后能用，基本数据类型不行
Integer 默认值为null , int 为0；（其他类推）



#三 字符串
意义：实现字符字面值，String类的实例化  

创建： String 对象一旦创建则无法改变(被final修饰保证安全性唯一性)
① String str1 = "AA";  String str2 = "AA";   
先在字符串常量池中查找是否有相应对象
有，则返回对象地址
没有，则创建对象再返回创建对象的地址

② String str3 = new String ("AA");		   
新开辟两个对象，一个在字符串常量池中，一个copy放在堆中

③String str4 = str3.intern();
先去字符串常量池中找相同的字符串，
有，则返回对象地址
没有，则创建对象再返回创建对象的地址

字符串比较：
  ==   只要有new出来的都是比较的地址
①   比较的值 true
①②比较地址 false    
②③比较地址 false  

equals  都是比较的值
重写后都是比较的值

常用方法
- char charAt(int index) :获取指定索引处的字符值
- int compareTo(String str):按字典比较两个字符串的顺序,返回两个字符串间隔的字符数
- String concat(String str)：字符串连接，返回新的字符串
- boolean contains(String str):判断当前字符串是否包含指定的子串
- boolean endsWith(String suffix):判断字符串是否以指定的后缀结束
- boolean equals(String str):判断两个字符串字面值是否一致
- boolean equalsIgnoreCase(String str):忽略大小写比较两个字符串是否相等
- byte[] getBytes():将字符串转换为字节数组
- int indexOf(String str):获取指定字符串在当前字符串中第一次出现的位置
- boolean isEmpty():判断字符串对象是否为空(非null)，当且仅当length()为0时输出true
- int length():获取字符串中字符的个数
- boolean matches(String regex):判断字符串是否匹配指定的正则表达式
- String replace(CharSequence oldValue,CharSequence newValue)：字符串替换，后者替换前者
- String[] split(String regex)根据指定的正则表达式将字符串截取并生成新的字符串数组
- String substring(int beginIndex,int endIndex):字符串截取
- String toUpperCase(String str)/String toLowerCase(String str)：大小写转换
- String trim():去除字符串前置与后置空格
![](img/week02_b1.png)  

字符缓冲区   StringBuilder  StringBuffer
意义：可变字符序列，优化String
创建：StringBuffer sb = new StringBuffer();
StringBuffer线程安全
StringBuilder不保证线程安全
常用方法  
  
![](img/week02_b2.png)

String优化
即使使用+号作为字符串拼接，也一样可以被编译器优化成
StringBuilder的方式，但再细致写，你会发现在编译器优化的代码中
每次循环都会生成一个新的StringBuilder对象，同时也会降低系统的性能。
所以平时做字符串拼接的时候，我建议你还是要显示的使用StringBuilder来
提升系统的性能。  

如果在多线程编程中，String对象拼接会涉及到线程安全问题，你可以使用
StringBuffer，但是要注意，由于StringBuffer是线程安全的，涉及
到锁的竞争，所以从性能上来说比StringBuilder要差一些

用String的intern方法可以节省内存空间，从而优化String对象的存储。
具体做法就是在，每次赋值的时候使用String的intern方法，如果常量池中有相同的值，就会重复使用该对象，
返回对象引用，这样一开始的对象就可以被回收掉，这种方式可以使重复性非常高的地址信息存储大小从20G降到
100M。
String a=new String("abc").intern();
String b=new String("abc").intern();
if(a==b){System.out.println("地址相等");}

如果调用intern方法，会去查看字符串常量池中是否有等于该对象的字符串，如果没有则就在常量池中新增该对象，并返回该对象的引用，如果有，就返回常量池中的字符串引用。堆内存中原有的对象由于没有引用指向它，将会通过垃圾回收期回收。

#四 正则表达式
意义：起到字符串筛选作用，是指一个用来描述或者匹配一系列符合某个句法规则的字符串
创建：
   java.util.regex.Patter;
   java.util.regex.Matcher;
   String regex = "a*b";                          //设置正则表达式
   String input = "aaaabbb";                  //匹配的字符串
   Pattern p = new Patter(regex);          //创建匹配器
   Matcher m = new Matcher(input);
   boolean a = m.matches();

   boolean b = Pattern.matches("a*b", "aaaaab");   //简写


三种匹配方式：
boolean matches()   尝试将整个区域与模式进行匹配。 
boolean lookingAt()  尝试将输入序列从区域开头开始与模式相匹配 
boolean find()String group()int groupCount()  尝试找到匹配模式的输入序列的下一个子序列。返回与上一个匹配匹配的输入子序列。返回此匹配器模式中捕获组的数量 
find()方法是部分匹配，是查找输入串中与模式匹配的子串，如果该匹配的串有组还可以使用group()函数。  

matches()是全部匹配，是将整个输入串与模式匹配，如果要验证一个输入的数据是否为数字类型或其他类型，一般要用matches()

eg:
public class MathcerDemo4 {
public static void main(String[] args) {
//创建模式
Pattern p=Pattern.compile("([a-zA-Z]+)(\\d+)");
//创建匹配器
Matcher m=p.matcher("a1_hjk556好W79_45");
while(m.find()) {
System.out.println("m.group(0)="+m.group(0)); // 整个 a1 hjk556 W79
System.out.println("m.group(1)"+m.group(1)); // a hjk w
System.out.println("m.group(2)"+m.group(2)); // 1 556 79
System.out.println("组个数:"+m.groupCount()); // 2个组
}}}


正则表达式组成规则：
1、字符
x :字符 x。举例：'a'表示字符a
\ :反斜线字符
\n :新行（换行）符 ('\u000A')
\r :回车符 ('\u000D')
2、字符类
[abc] :a 或 b 或 c（取其中之一）
[^abc] : 除了 a、b 或 c之外的任何字符（否定）
[a-zA-Z] :a到 z 或 A到 Z，两头的字母包括在内（范围）
[0-9] : 0到9的字符都包括，取其一
3、预定义字符类
. :任何字符。若想要匹配.本身，则使用.
\d :数字：[0-9]
\w :单词字符：[a-zA-Z_0-9] ;在正则表达式里面组成单词的东西必须由这些东西组成
\s: 空白 \t\r\n 空格
4、边界匹配器
^ :行的开头
$ :行的结尾
\b :单词边界 就是不是单词字符的地方。 举例：hello world?haha;xixi
5、Greedy 数量词 ，用来匹配前面的规则出现的次数
X? :X，一次或一次也没有
X* :X，零次或多次，可以没有 X+ X，一次或多次，至少一次
X{n} :X，恰好 n 次
X{n,} :X，至少 n 次
X{n,m} :X，至少 n 次，至多 m 次

常用正则表达式：
1.验证用户名和密码：（"^[a-zA-Z]\w{5,15}$"）正确格式："[A-Z][a-z]_[0-9]"组成,并且第一个字必须为字母
6~16位；
2.验证电话号码：（"^(\d{3,4}-)\d{7,8}$"）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；
3.验证手机号码："^1[3|4|5|7|8][0-9]{9}$"；
4.验证身份证号（15位）："\d{14}[[0-9],0-9xX]"，（18位）："\d{17}(\d|X|x)"；
5.验证Email地址：("^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$")；
6.只能输入由数字和26个英文字母组成的字符串：("^[A-Za-z0-9]+$")；
7.整数或者小数：^[0-9]+([.][0-9]+){0,1}$
8.只能输入数字："^[0-9]*$"。
9.只能输入n位的数字："^\d{n}$"。
10.只能输入至少n位的数字："^\d{n,}$"。
11.只能输入m~n位的数字："^\d{m,n}$"。
12.只能输入零和非零开头的数字："^(0|[1-9][0-9]*)$"。
13.只能输入有两位小数的正实数："^[0-9]+(\.[0-9]{2})?$"。
14.只能输入有1~3位小数的正实数："^[0-9]+(\.[0-9]{1,3})?$"。
15.只能输入非零的正整数："^\+?[1-9][0-9]*$"。
16.只能输入非零的负整数："^\-[1-9][0-9]*$"。
17.只能输入长度为3的字符："^.{3}$"。
18.只能输入由26个英文字母组成的字符串："^[A-Za-z]+$"。
19.只能输入由26个大写英文字母组成的字符串："^[A-Z]+$"。
20.只能输入由26个小写英文字母组成的字符串："^[a-z]+$"。
21.验证是否含有^%&',;=?$\"等字符："[%&',;=?$\\^]+"。
22.只能输入汉字："^[\u4e00-\u9fa5]{0,}$"。
23.验证URL："^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$"。
24.验证一年的12个月："^(0?[1-9]|1[0-2])$"正确格式为："01"～"09"和"10"～"12"。
25.验证一个月的31天："^((0?[1-9])|((1|2)[0-9])|30|31)$"正确格式
为；"01"～"09"、"10"～"29"和“30”~“31”。
26.获取日期正则表达式：\\d{4}[年|\-|\.]\d{\1-\12}[月|\-|\.]\d{\1-\31}日?
评注：可用来匹配大多数年月日信息。
27.匹配双字节字符(包括汉字在内)：[^\x00-\xff]
评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）
28.匹配空白行的正则表达式：\n\s*\r
评注：可以用来删除空白行
29.匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?</>|<.*? />
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力
30.匹配首尾空白字符的正则表达式：^\s*|\s*$
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式
31.匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*
评注：网上流传的版本功能很有限，上面这个基本可以满足需求
32.匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
评注：表单验证时很实用
33.匹配腾讯QQ号：[1-9][0-9]{4,}
评注：腾讯QQ号从10 000 开始
34.匹配中国邮政编码：[1-9]\\d{5}(?!\d)
评注：中国邮政编码为6位数字
35.匹配ip地址：([1-9]{1,3}\.){3}[1-9]。
评注：提取ip地址时有用
36.匹配MAC地址：([A-Fa-f0-9]{2}\:){5}[A-Fa-f0-9]
只能输入数字：“^[0-9]*$”
只能输入n位的数字：“^d{n}$”
只能输入至少n位数字：“^d{n,}$”
只能输入m-n位的数字：“^d{m,n}$”
只能输入零和非零开头的数字：“^(0|[1-9][0-9]*)$”
只能输入有两位小数的正实数：“^[0-9]+(.[0-9]{2}) $”
只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]{1,3}) $”
只能输入非零的正整数：“^+ [1-9][0-9]*$”
只能输入非零的负整数：“^-[1-9][0-9]*$”
只能输入长度为3的字符：“^.{3}$”
只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$”
只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$”
只能输入由26个小写英文字母组成的字符串：“^[a-z]+$”
只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$”
只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$”
验证用户密码:“^[a-zA-Z]w{5,17}$”正确格式为：以字母开头，长度在6-18之间， 只能包含字符、数字和下划线。
验证是否含有^%&',;= $"等字符：“[^%&',;= $x22]+”
只能输入汉字：“^[u4e00-u9fa5]{0,}$”
验证Email地址：“^w+[-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$”
验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./ %&=]*) $”
验证电话号码：“^((d{3,4})|d{3,4}-) d{7,8}$” 正确格式为：“XXXX-XXXXXXX”，“XXXX-XXXXXXXX”，“XXXXXXXXXX”， “XXX-XXXXXXXX”，“XXXXXXX”，“XXXXXXXX”。
验证身份证号（15位或18位数字）：“^d{15}|d{}18$”
验证一年的12个月：“^(0 [1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12”
验证一个月的31天：“^((0 [1-9])|((1|2)[0-9])|30|31)$” 正确格式为：“01”“09”和“1”“31”。
验证手机号码:/^((\(\d{3}\))|(\d{3}\-))?13\d{9}|15[89]\d{8}$/ (可能要去掉$/)

#五 static 修饰符
意义：将编译后的内存保存，直到退出程序释放。
使用：
①修饰内部类 外部类只能用public，默认不写，final，abstract
②修饰属性  属性整个类共享  不属于某个对象 如同班费 类名.方法 访问  
③修饰方法  静态方法可以直接 类名.方法 调用  静态方法只能调用静态成员
          父类static修饰的方法，也叫类方法，也不能被子类重写
④修饰游离块  静态游离块  类加载的最先执行且执行1次
静态内容是优先于对象存在，在静态方法中只能直接访问静态的成分，
不能使用this/super。静态修饰的内容存于静态区

设计模式：单例模式
单例模式(Singleton)，在程序的运行期间某个对象的实例始终只会存在一个，就算多少次获取，获得的始终是同一个
实例对象，单例模式的设计原则:
- 构造器必须私有化，防止外界随意访问
- 提供static方法用于获取对象实例
单例模式的实现方式包含两种:
1. 懒汉模式
public class IceBox{
//步骤1：构造器私有化,不能让其他类随意调用此构造器创建对象
private IceBox(){
}
 //步骤2： 定义静态属性
private static IceBox box; //共享的
//步骤3：提供一个访问它的全局public static访问点
public static IceBox getIceBox(){
if(box==null){
box=new IceBox();
} 
return box;
}}
 public class Test{
public static void main(String[] args){
IceBox b1=IceBox.getIceBox();
懒汉模式（延迟创建）
IceBox b2=IceBox.getIceBox();
System.out.println(b1==b2);//true代表是同一个对象
}}

 
2. 饿汉模式
public class IceBox {
private static final IceBox box=new IceBox();
private IceBox(){
} 
public static IceBox getIceBox(){
return box;
}}
 public class Test{
public static void main(String[] args){
IceBox b1=IceBox.getIceBox();
IceBox b2=IceBox.getIceBox();
System.out.println(b1==b2);//true代表是同一个对象
}}
 public class Singleton{
private static Singleton instance; //静态变量和类相关，所有的对象公用此变量
private Singleton(){} //构造器私有化(访问控制修饰符改为私有)
//提供一个全局访问点，来获取这个对象
public static Singleton getInstance(){
if(instance == null){
instance = new Singleton();
} 
return instance;
}}


饿汉模式(饥渴创建)
public class Singleton{
private static Singleton instance = new Singleton();
private Singleton(){}
public static Singleton getInstance(){
return instance;
}}


静态变量和非静态变量的区别
被static修饰的变量，叫静态变量或类变量；
没有被static修饰的变量,叫非静态变量或实例变量
两者的区别是：

对于静态变量在内存中只有一个拷贝，JVM只为静态分配一次内存，此内存直到所在类的程序运行完才消亡，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问。所有的对象都共享这个属性此变量，全局变量。

对于实例变量，每创建一个实例，才会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响。每个对象都有自己的属性，局部变量。

#六 final 修饰符
 意义：
final的意思为最终，不可变。final是个修饰符，它可以用来修饰类，类的成员，以及局部变量让他们都最终化不可修改。  

使用：
①修饰类  类不可继承
②修饰变量   都称为常量（每个单词都大写，用下划线连接单词） 值或地址不可变 
③修饰方法  父类中final修饰的方法，不可以被重写覆盖，但可以继承使用
                    父类中static修饰的方法，也叫类方法，不属于对象，也不能被子类重写
      父类中private修饰的方法，不能被子类看见，也就不能重写
private 修饰的方法
④局部变量  final修饰

#七 abstract
意义：
将设计和实现分离，只有功能声明，没有功能主体实现方法  

使用：
public abstract class A{}
 
普通类可以定义什么，抽象类就可以定义什么，但只有抽象类和接口才能定义抽象方法，
       抽象类中不能实例化，且类里面至少有一个抽象方法，只有抽象方法名，却没有方法体，			   （有小括号没有花括号）。
      至少被一个子类继承，且必须实现抽象类的所有抽象方法。如果子类没有全部实现，则子类也要写成抽象类，未被实现的抽象方法被下一个子类实现。	
当一个类实现一个或多个接口，接口中的抽象方法又未能全部实现，则把自己定义成抽象类，让继承自己的类实现未被实现的抽象方法。
抽象类存在构造方法，本身不能使用，提供给子类使用。
abstract不能和static final private 同时使用

